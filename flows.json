[
    {
        "id": "a7b9d689.b8a5e8",
        "type": "tab",
        "label": "Flow1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "6ad7c930.1a06b8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Chill Detector",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "373e7d51.903ea2",
        "type": "serial-port",
        "z": "",
        "serialport": "/dev/ttyS0",
        "serialbaud": "115200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "newline": "5008",
        "bin": "bin",
        "out": "count",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "31f24433.6d114c",
        "type": "mqtt-broker",
        "z": "",
        "name": "MQTT Broker",
        "broker": "$(MQTTSERVERIP)",
        "port": "1883",
        "clientid": "$(MQTTCLIENTID)",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "65e743b1.3be17c",
        "type": "serial in",
        "z": "a7b9d689.b8a5e8",
        "name": "Teensy",
        "serial": "373e7d51.903ea2",
        "x": 250,
        "y": 80,
        "wires": [
            [
                "2af394dd.443cdc",
                "9c4cbe2.b12974"
            ]
        ]
    },
    {
        "id": "8bf276a.f678288",
        "type": "serial out",
        "z": "a7b9d689.b8a5e8",
        "name": "",
        "serial": "373e7d51.903ea2",
        "x": 600,
        "y": 200,
        "wires": []
    },
    {
        "id": "e3a916f6.e99d88",
        "type": "inject",
        "z": "a7b9d689.b8a5e8",
        "name": "Setting Init",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "x": 230,
        "y": 200,
        "wires": [
            [
                "2af394dd.443cdc"
            ]
        ]
    },
    {
        "id": "2af394dd.443cdc",
        "type": "function",
        "z": "a7b9d689.b8a5e8",
        "name": "Send Settings",
        "func": "var freqOffset     = getAttrObject(flow.get('device'), 'settings', 'freqOffset').value;\nvar sampleInterval = getAttrObject(flow.get('device'), 'settings', 'sampleInterval').value;\n\nvar buffer = new ArrayBuffer(8);\nvar settingsView = new DataView(buffer);\nsettingsView.setInt32(0,freqOffset, true);\nsettingsView.setInt32(4,sampleInterval, true);\n\nreturn {topic:'settings',payload:Buffer.from(buffer)};\n\nfunction getAttrObject(device, propName, attrName)\n{\n    var props = device[propName];\n    var attr = props.find(attr => attr.attr === attrName);\n    return attr;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 420,
        "y": 200,
        "wires": [
            [
                "8bf276a.f678288"
            ]
        ]
    },
    {
        "id": "9c4cbe2.b12974",
        "type": "function",
        "z": "a7b9d689.b8a5e8",
        "name": "Convert Bytes to Float",
        "func": "var npts = 512;\nvar buf = new ArrayBuffer(4);\nvar view = new DataView(buf);\nvar real = [];\nvar imag = [];\nfor (var ipt = 0; ipt < npts; ++ipt)\n{\n    for (ib = 0; ib < 4; ++ib) view.setUint8(ib, msg.payload[ipt * 4 + 3 - ib]);\n    real[ipt] = view.getFloat32(0);\n    for (ib = 0; ib < 4; ++ib) view.setUint8(ib, msg.payload[(ipt + npts) * 4 + 3 - ib]);\n    imag[ipt] = view.getFloat32(0);\n}\nvar lastPt = npts + npts;\nfor (ib = 0; ib < 4; ++ib) view.setUint8(ib, msg.payload[lastPt * 4 + 3 - ib]);\nvar ultraAmp = view.getInt32(0);\nvar ultraAmpAttr = getAttrObject(flow.get('device'), 'readings', 'ultraAmp');\nultraAmpAttr.value = ultraAmp;\nvar ultraAmpLed = 100 * (ultraAmp - ultraAmpAttr.alarm.limits.lolo) / (ultraAmpAttr.alarm.limits.hihi - ultraAmpAttr.alarm.limits.lolo);\nif (ultraAmpLed < 0) ultraAmpLed = 0;\nif (ultraAmpLed > 100) ultraAmpLed = 100;\nultraAmpLed = Math.round(ultraAmpLed);\n\nvar ultraAmpLedOnMode = context.get('ultraAmpLedOnMode');\nif (ultraAmpLedOnMode == undefined) ultraAmpLedOnMode = 1;\nif (ultraAmpLed == 100)\n{\n    ++ultraAmpLedOnMode;\n}\nelse\n{\n    ultraAmpLedOnMode = 1;\n}\nif (ultraAmpLedOnMode > 1) ultraAmpLedOnMode = 0;\ncontext.set('ultraAmpLedOnMode',ultraAmpLedOnMode);\nif (ultraAmpLedOnMode == 0) ultraAmpLed = 0;\n\n++lastPt;\nfor (ib = 0; ib < 4; ++ib) view.setUint8(ib, msg.payload[lastPt * 4 + 3 - ib]);\nvar freqOffset = view.getInt32(0);\nvar freqOffsetAttr = getAttrObject(flow.get('device'), 'readings', 'freqOffset');\nfreqOffsetAttr.value = freqOffset;\n\n++lastPt;\nfor (ib = 0; ib < 4; ++ib) view.setUint8(ib, msg.payload[lastPt * 4 + 3 - ib]);\nvar sampleInterval = view.getInt32(0);\nvar sampleIntervalAttr = getAttrObject(flow.get('device'), 'readings', 'sampleInterval');\nsampleIntervalAttr.value = sampleInterval;\n\n\nreturn [{topic:'timeData', payload:{'real':real,'imag':imag}}, {topic:'ultraAmpLed', payload:ultraAmpLed}];\n\nfunction getAttrObject(device, propName, attrName)\n{\n    var props = device[propName];\n    var attr = props.find(attr => attr.attr === attrName);\n    return attr;\n}\n",
        "outputs": 2,
        "noerr": 0,
        "x": 440,
        "y": 80,
        "wires": [
            [
                "47f8e462.5c45bc"
            ],
            [
                "84a39e48.38afb"
            ]
        ]
    },
    {
        "id": "78bcaa1a.e584a4",
        "type": "json",
        "z": "a7b9d689.b8a5e8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 330,
        "y": 300,
        "wires": [
            [
                "bd2beb50.e5c8b8",
                "756b3c4.e8f1dc4"
            ]
        ]
    },
    {
        "id": "6dc631be.a8f27",
        "type": "file",
        "z": "a7b9d689.b8a5e8",
        "name": "Write initSettings.json",
        "filename": "initSettings.json",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1000,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "bd2beb50.e5c8b8",
        "type": "function",
        "z": "a7b9d689.b8a5e8",
        "name": "createSettings",
        "func": "function getAttrObject(device, propName, attrName)\n{\n    var props = device[propName];\n    var attr = props.find(attr => attr.attr === attrName);\n    return attr;\n}\nvar device = msg.payload;\nfor (var ii = 0; ii < device.settings.length; ++ii)\n{\n    if (device.settings[ii].type == 'scalar')\n    {\n        device.settings[ii].alarm.value = 0;\n        if (!isNaN(device.settings[ii].value))\n        {\n            if (device.settings[ii].value < device.settings[ii].alarm.limits.low)  device.settings[ii].alarm.value = 1;\n            if (device.settings[ii].value < device.settings[ii].alarm.limits.lolo) device.settings[ii].alarm.value = 3;\n            if (device.settings[ii].value > device.settings[ii].alarm.limits.high) device.settings[ii].alarm.value = 2;\n            if (device.settings[ii].value > device.settings[ii].alarm.limits.hihi) device.settings[ii].alarm.value = 4;\n        }\n    }\n}\n\nflow.set('device', device);    \n\n\nreturn {topic:'settings',device};",
        "outputs": 1,
        "noerr": 0,
        "x": 980,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "198dbd00.79b393",
        "type": "inject",
        "z": "a7b9d689.b8a5e8",
        "name": "",
        "topic": "initSettings",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 160,
        "y": 360,
        "wires": [
            [
                "3b875ff3.8f057"
            ]
        ]
    },
    {
        "id": "3b875ff3.8f057",
        "type": "file in",
        "z": "a7b9d689.b8a5e8",
        "name": "Read initSettings.json",
        "filename": "initSettings.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 380,
        "y": 360,
        "wires": [
            [
                "668cfe89.a58c1"
            ]
        ]
    },
    {
        "id": "668cfe89.a58c1",
        "type": "json",
        "z": "a7b9d689.b8a5e8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 550,
        "y": 360,
        "wires": [
            [
                "c37ea33d.26db1"
            ]
        ]
    },
    {
        "id": "c37ea33d.26db1",
        "type": "function",
        "z": "a7b9d689.b8a5e8",
        "name": "Save initSettings in Memory",
        "func": "flow.set('device', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 740,
        "y": 360,
        "wires": [
            [
                "bd2beb50.e5c8b8"
            ]
        ]
    },
    {
        "id": "9780e448.67d428",
        "type": "exec",
        "z": "a7b9d689.b8a5e8",
        "command": "iwconfig",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 340,
        "y": 660,
        "wires": [
            [
                "cf3426d8.2e51a8"
            ],
            [],
            []
        ]
    },
    {
        "id": "334a5215.950eae",
        "type": "inject",
        "z": "a7b9d689.b8a5e8",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "x": 180,
        "y": 660,
        "wires": [
            [
                "9780e448.67d428"
            ]
        ]
    },
    {
        "id": "cf3426d8.2e51a8",
        "type": "function",
        "z": "a7b9d689.b8a5e8",
        "name": "Get Signal Quality",
        "func": "var info = msg.payload;\nvar linkStartIndex  = info.indexOf('Link Quality=');\nvar levelStartIndex = info.indexOf('Signal level=');\nvar linkStopIndex   = info.indexOf('/70');\nvar levelStopIndex   = info.lastIndexOf('dBm');\nvar linkQuality = Number(info.substring(linkStartIndex + 13, linkStopIndex));\nvar signalLevel =  Number(info.substring(levelStartIndex + 13, levelStopIndex - 1));\nvar ssid = info.substring(info.indexOf('ESSID') + 7);\nssid = ssid.substring(0,ssid.indexOf('\"'));\nvar val = {linkQuality : linkQuality, signalLevel: signalLevel, ssid:ssid};\nflow.set('linkQuality',linkQuality);\nflow.set('signalLevel', signalLevel);\nflow.set('ssid', ssid);\nreturn {topic :'test',payload : val};",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "47f8e462.5c45bc",
        "type": "function",
        "z": "a7b9d689.b8a5e8",
        "name": "Angle FFT",
        "func": "var lambda2 = 4125.0 // half wavelength at 40 kHz microns\nvar sampleRate = 1000000.0 / getAttrObject(flow.get('device'), 'readings', 'sampleInterval').value;\nvar npts = msg.payload.real.length;\nvar adcHalf = 2048.0;\nvar tiny = 1.0e-6;\nvar thetaTime = [];\nvar thetaRealFft = [];\nvar thetaImagFtt = [];\nvar thetaAvg = 0.0;\nfor (ii = 0; ii < npts; ++ii)\n{\n    msg.payload.imag[ii] = (msg.payload.imag[ii] - adcHalf) / adcHalf;\n    msg.payload.real[ii] = (msg.payload.real[ii] - adcHalf) / adcHalf;\n    thetaTime[ii] = lambda2 * Math.atan2(msg.payload.imag[ii], msg.payload.real[ii] + tiny) / Math.PI;\n    thetaAvg = thetaAvg + thetaTime[ii];\n}\nthetaAvg = thetaAvg / npts;\nfor (ii = 0; ii < npts; ++ii)\n{\n    thetaTime[ii] = thetaTime[ii] - thetaAvg;\n    thetaRealFft[ii] = thetaTime[ii];\n    thetaImagFtt[ii] = 0.0;\n    \n}\ntransformRadix2(thetaRealFft,thetaImagFtt);\nvar sqrtNpts = Math.sqrt(npts);\n\nfor (ii = 0; ii < npts; ++ii)\n{\n    thetaRealFft[ii] = thetaRealFft[ii] / sqrtNpts;\n    thetaImagFtt[ii] = thetaImagFtt[ii] / sqrtNpts;\n}\nthetaRealFft[0] = 0.0;\nthetaImagFtt[0] = 0.0;\nthetaRealFft[npts / 2] = 0.0;\nthetaImagFtt[npts / 2] = 0.0;\n\nvar device = flow.get('device');\nvar npts2 = npts / 2;\nvar minDisplayMode = getAttrObject(device, 'settings', 'minDisplayMode');\nvar maxDisplayMode = getAttrObject(device, 'settings', 'maxDisplayMode');\n\nvar minDisplayModeIndex = Math.round(minDisplayMode.value * npts / sampleRate);\nif (minDisplayModeIndex < 1)  minDisplayModeIndex = 1;\nif (minDisplayModeIndex >= npts2)  minDisplayModeIndex = npts2 - 1;\n\nvar maxDisplayModeIndex = Math.round(maxDisplayMode.value * npts / sampleRate);\nif (maxDisplayModeIndex < 1)  maxDisplayModeIndex = 1;\nif (maxDisplayModeIndex >= npts2)  maxDisplayModeIndex = npts2 - 1;\n\nfor (var ii = 1; ii < minDisplayModeIndex; ++ii)\n{\n    thetaRealFft[ii] = 0.0;\n    thetaImagFtt[ii] = 0.0;\n\n    thetaRealFft[npts - ii] = 0.0;\n    thetaImagFtt[npts - ii] = 0.0;\n}\nreturn {'topic':'fft', 'payload':{real:thetaRealFft,imag:thetaImagFtt}};\n\nfunction getAttrObject(device, propName, attrName)\n{\n    var props = device[propName];\n    var attr = props.find(attr => attr.attr === attrName);\n    return attr;\n}\n\n\n/* https://www.nayuki.io/res/free-small-fft-in-multiple-languages/fft.js\n * Computes the discrete Fourier transform (DFT) of the given complex vector, storing the result back into the vector.\n * The vector's length must be a power of 2. Uses the Cooley-Tukey decimation-in-time radix-2 algorithm.\n */\nfunction transformRadix2(real, imag) {\n\t// Length variables\n\tvar n = real.length;\n\tif (n != imag.length)\n\t\tthrow \"Mismatched lengths\";\n\tif (n == 1)  // Trivial transform\n\t\treturn;\n\tvar levels = -1;\n\tfor (var i = 0; i < 32; i++) {\n\t\tif (1 << i == n)\n\t\t\tlevels = i;  // Equal to log2(n)\n\t}\n\tif (levels == -1)\n\t\tthrow \"Length is not a power of 2\";\n\t\n\t// Trigonometric tables\n\tvar cosTable = new Array(n / 2);\n\tvar sinTable = new Array(n / 2);\n\tfor (var i = 0; i < n / 2; i++) {\n\t\tcosTable[i] = Math.cos(2 * Math.PI * i / n);\n\t\tsinTable[i] = Math.sin(2 * Math.PI * i / n);\n\t}\n\t\n\t// Bit-reversed addressing permutation\n\tfor (var i = 0; i < n; i++) {\n\t\tvar j = reverseBits(i, levels);\n\t\tif (j > i) {\n\t\t\tvar temp = real[i];\n\t\t\treal[i] = real[j];\n\t\t\treal[j] = temp;\n\t\t\ttemp = imag[i];\n\t\t\timag[i] = imag[j];\n\t\t\timag[j] = temp;\n\t\t}\n\t}\n\t\n\t// Cooley-Tukey decimation-in-time radix-2 FFT\n\tfor (var size = 2; size <= n; size *= 2) {\n\t\tvar halfsize = size / 2;\n\t\tvar tablestep = n / size;\n\t\tfor (var i = 0; i < n; i += size) {\n\t\t\tfor (var j = i, k = 0; j < i + halfsize; j++, k += tablestep) {\n\t\t\t\tvar l = j + halfsize;\n\t\t\t\tvar tpre =  real[l] * cosTable[k] + imag[l] * sinTable[k];\n\t\t\t\tvar tpim = -real[l] * sinTable[k] + imag[l] * cosTable[k];\n\t\t\t\treal[l] = real[j] - tpre;\n\t\t\t\timag[l] = imag[j] - tpim;\n\t\t\t\treal[j] += tpre;\n\t\t\t\timag[j] += tpim;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Returns the integer whose value is the reverse of the lowest 'bits' bits of the integer 'x'.\n\tfunction reverseBits(x, bits) {\n\t\tvar y = 0;\n\t\tfor (var i = 0; i < bits; i++) {\n\t\t\ty = (y << 1) | (x & 1);\n\t\t\tx >>>= 1;\n\t\t}\n\t\treturn y;\n\t}\n}\nvar chart = \n[\n    {\n        \"series\": [\"Theta\"],\n        \"data\": \n        [\n            traceTheta\n        ],\n        \"labels\": [\"\"]\n    }\n];\n\nreturn {topic:'theta',payload:chart};",
        "outputs": 1,
        "noerr": 0,
        "x": 640,
        "y": 80,
        "wires": [
            [
                "495d076.c7e32f8"
            ]
        ]
    },
    {
        "id": "495d076.c7e32f8",
        "type": "function",
        "z": "a7b9d689.b8a5e8",
        "name": "FFTMAG",
        "func": "function getAttrObject(device, propName, attrName)\n{\n    var props = device[propName];\n    var attr = props.find(attr => attr.attr === attrName);\n    return attr;\n}\n\nvar device = flow.get('device');\nvar sampleRate = 1000000.0 / getAttrObject(flow.get('device'), 'readings', 'sampleInterval').value;\nvar averages = getAttrObject(flow.get('device'), 'settings', 'averages').value;\nif (averages < 1) averages = 1;\nvar npts = msg.payload.real.length\nvar npts2 = npts / 2;\nvar mode = [];\nvar modeMin = 0.01;\nvar fftmag = context.get('fftmag');\nvar spectrum    = getAttrObject(device, 'readings', 'spectrum');\nif (fftmag == undefined)\n{\n    fftmag = [];    \n    for (var ii = 0; ii < npts2; ++ii) fftmag[ii] = 0.0;\n}\n\nfor (var ii = 0; ii < npts2; ++ii)\n{\n    var fft = Math.sqrt(msg.payload.real[ii] * msg.payload.real[ii] + msg.payload.imag[ii] * msg.payload.imag[ii]);\n    fftmag[ii] =  fftmag[ii] + (fft - fftmag[ii]) / averages;\n    mode[ii] = ii * sampleRate / npts;\n    spectrum.value[0][ii] =  Math.round(100.0 * mode[ii] ) / 100.0;\n    spectrum.value[1][ii] =  Math.round(100.0 * fftmag[ii] ) / 100.0;;\n}\ncontext.set('fftmag', fftmag);\n\nvar maxAmp      = getAttrObject(device, 'readings', 'maxAmp');\nvar maxAmpMode  = getAttrObject(device, 'readings', 'maxAmpMode');\nvar avgPower    = getAttrObject(device, 'readings', 'avgPower');\n\nvar minDisplayMode = getAttrObject(device, 'settings', 'minDisplayMode');\nvar maxDisplayMode = getAttrObject(device, 'settings', 'maxDisplayMode');\n\nvar minDisplayModeIndex = Math.round(minDisplayMode.value * npts / sampleRate);\nif (minDisplayModeIndex < 1)  minDisplayModeIndex = 1;\nif (minDisplayModeIndex >= npts2)  minDisplayModeIndex = npts2 - 1;\n\nvar maxDisplayModeIndex = Math.round(maxDisplayMode.value * npts / sampleRate);\nif (maxDisplayModeIndex < 1)  maxDisplayModeIndex = 1;\nif (maxDisplayModeIndex >= npts2)  maxDisplayModeIndex = npts2 - 1;\n\nmaxAmp.value = 0.0;\nmaxAmpMode.value = -1;\navgPower.value = 0.0;\nfor (var ii = minDisplayModeIndex; ii <= maxDisplayModeIndex; ++ii)\n{\n    if (maxAmp.value < fftmag[ii])\n    {\n        maxAmp.value = fftmag[ii];\n        maxAmpMode.value = ii * sampleRate / npts;\n    }\n    avgPower.value = avgPower.value + fftmag[ii];\n}\navgPower.value = Math.round(100.0 * avgPower.value) / 100;\nmaxAmp.value = Math.round(100.0 * maxAmp.value) / 100;\nmaxAmpMode.value = Math.round(100.0 * maxAmpMode.value) / 100;\nflow.set('device',device)\nreturn {topic:'device', payload:device};\n",
        "outputs": 1,
        "noerr": 0,
        "x": 800,
        "y": 80,
        "wires": [
            [
                "5f8e48e.25e96b8"
            ]
        ]
    },
    {
        "id": "5f8e48e.25e96b8",
        "type": "function",
        "z": "a7b9d689.b8a5e8",
        "name": "Check Reading Alarms",
        "func": "function getAttrObject(device, propName, attrName)\n{\n    var props = device[propName];\n    var attr = props.find(attr => attr.attr === attrName);\n    return attr;\n}\n\nvar linkQuality = getAttrObject(msg.payload, 'readings', 'linkQuality');\nvar signalLevel = getAttrObject(msg.payload, 'readings', 'signalLevel');\nlinkQuality.value = flow.get('linkQuality');\nsignalLevel.value = flow.get('signalLevel');\nfor (var ii = 0; ii < msg.payload.readings.length; ++ii)\n{\n    if (msg.payload.readings[ii].type == 'scalar')\n    {\n        msg.payload.readings[ii].alarm.value = 0;\n        if (!isNaN(msg.payload.readings[ii].value))\n        {\n            if (msg.payload.readings[ii].value < msg.payload.readings[ii].alarm.limits.low)  msg.payload.readings[ii].alarm.value = 1;\n            if (msg.payload.readings[ii].value < msg.payload.readings[ii].alarm.limits.lolo) msg.payload.readings[ii].alarm.value = 3;\n            if (msg.payload.readings[ii].value > msg.payload.readings[ii].alarm.limits.high) msg.payload.readings[ii].alarm.value = 2;\n            if (msg.payload.readings[ii].value > msg.payload.readings[ii].alarm.limits.hihi) msg.payload.readings[ii].alarm.value = 4;\n        }\n    }\n}\nflow.set('device', msg.payload);\n\nvar blueLed = context.get('blueLed');\nif (blueLed == undefined) blueLed = 1;\n++blueLed;\nif (blueLed > 1) blueLed = 0;\ncontext.set('blueLed',blueLed);\n\nreturn [msg, {topic:'blueLed',payload:blueLed}];",
        "outputs": 2,
        "noerr": 0,
        "x": 980,
        "y": 80,
        "wires": [
            [
                "2a6f9a2c.6a8766"
            ],
            [
                "7df415f5.59ab7c"
            ]
        ]
    },
    {
        "id": "756b3c4.e8f1dc4",
        "type": "function",
        "z": "a7b9d689.b8a5e8",
        "name": "Make Pretty",
        "func": "var jsonPretty = JSON.stringify(msg.payload,null,2);\nreturn {topic: msg.payload, payload:jsonPretty};",
        "outputs": 1,
        "noerr": 0,
        "x": 800,
        "y": 300,
        "wires": [
            [
                "6dc631be.a8f27"
            ]
        ]
    },
    {
        "id": "2a6f9a2c.6a8766",
        "type": "mqtt out",
        "z": "a7b9d689.b8a5e8",
        "name": "Publish Readings",
        "topic": "$(MQTTPUBLISHTOPIC)",
        "qos": "0",
        "retain": "false",
        "broker": "31f24433.6d114c",
        "x": 1200,
        "y": 80,
        "wires": []
    },
    {
        "id": "83cf463e.039098",
        "type": "mqtt in",
        "z": "a7b9d689.b8a5e8",
        "name": "Subscribe Settings",
        "topic": "$(MQTTSUBSCRIBETOPIC)",
        "qos": "0",
        "datatype": "auto",
        "broker": "31f24433.6d114c",
        "x": 150,
        "y": 300,
        "wires": [
            [
                "78bcaa1a.e584a4"
            ]
        ]
    },
    {
        "id": "7df415f5.59ab7c",
        "type": "rpi-gpio out",
        "z": "a7b9d689.b8a5e8",
        "name": "Blue LED",
        "pin": "16",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "x": 1180,
        "y": 160,
        "wires": []
    },
    {
        "id": "84a39e48.38afb",
        "type": "rpi-gpio out",
        "z": "a7b9d689.b8a5e8",
        "name": "RED LED",
        "pin": "22",
        "set": false,
        "level": "0",
        "freq": "",
        "out": "pwm",
        "x": 640,
        "y": 140,
        "wires": []
    }
]